name: GT2Ultra for USBSID-Pico Snapshot Build
env:
  AUTOMATIC_MONITOR: true
  THE_SERVER: ${{ github.server_url }}
  PATH_SOURCE_CHECKOUT: temp_folder
  PATH_ARTIFACTS: dist
  ACTIONS_RUNNER_DEBUG: true
on:
  push:
    tags:
    - '*'
#    - 'r[0-9]+' # any tag name that looks like an svn commit
  workflow_dispatch:
concurrency:
  group: USBSID-Pico Snapshot Build
  cancel-in-progress: true

jobs:
  cleanup_previous_builds: # Delete unfinished draft prereleases, and prereleases older than 30 days (but keep at least 10)
    name: Cleanup Previous Builds
    if: ${{ !github.event.act }} # skip during local actions testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            // Get a list of all releases, sorted newest first
            let releases =
              (await github.paginate(
                github.rest.repos.listReleases,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo
                }))
                .sort((a,b) => b.created_at.localeCompare(a.created_at));

            let releaseCount = 0;
            let releasesToDelete = [];

            // Initiate deletion of draft prereleases
            if (releases.length)
            {
              for (const release of releases)
              {
                // Only cleanup prereleases
                if (!release.prerelease)
                  continue;

                // Failed builds leave drafts - delete them
                if (release.draft)
                {
                  console.log("Will delete draft prerelease: " + release.tag_name);
                  releasesToDelete.push(release.id);
                  continue;
                }

                // Keep at least 10, no matter how old
                if (++releaseCount <= 10)
                  continue;

                // We have more than 10 releases - delete those more than 30 days old
                let daysAgo = Math.floor((new Date() - Date.parse(release.created_at)) / 1000 / 60 / 60 / 24);

                if (daysAgo <= 30)
                  continue;

                console.log("Will delete old prerelease: " + release.tag_name);
                releasesToDelete.push(release.id);
              }

              if (releasesToDelete.length)
              {
                let promises = [];

                for (const id of releasesToDelete)
                {
                  promises.push(
                    github.rest.repos.deleteRelease(
                      {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        release_id: id
                      }));
                }

                console.log("Waiting for deletions to complete");
                await Promise.all(promises);
              }
            }

            console.log("Done.");

  create_release:
    name: Create Draft Release
    if: ${{ !github.event.act }} # skip during local actions testing
    needs: cleanup_previous_builds
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.release_id }}
    steps:
      - uses: actions/github-script@v7
        id: create_release
        env:
          TAG_NAME: ${{ github.ref }}
          RELEASE_NAME: ${{ github.ref }} snapshot
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            const { TAG_NAME, RELEASE_NAME } = process.env;
            const createReleaseResponse = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG_NAME.replace('refs/tags/', ''),
              name: RELEASE_NAME.replace('refs/tags/', ''),
              draft: true,
              prerelease: true,
              target_commitish: context.sha
            });
            core.setOutput('release_id', createReleaseResponse.data.id);
            core.setOutput('upload_url', createReleaseResponse.data.upload_url);

  build_lin:
    name: Build Linux Package
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
      - name: 🗒️ Set tag output
        id: vars
        run: |
          echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - shell: bash
        run: git config --global core.autocrlf input

      - name: Checkout Source
        if: env.exiting1 != 'true'
        uses: actions/checkout@v4

      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y build-essential \
                              dos2unix \
                              libasound-dev \
                              libusb-1.0-0 \
                              libusb-1.0-0-dev \
                              libusb-dev \
                              libsdl2-2.0-0 \
                              libsdl2-dev \
                              libsdl2-image-2.0-0 \
                              libsdl2-image-dev

      - name: Build
        shell: bash
        run: |
          mkdir -p linux
          cd src
          cp makefile.lin makefile
          make -j2 -s --no-print-directory

      - name: Zip files
        id: make_zip
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          mkdir gt2ultra-linux
          cp -av linux/* gt2ultra-linux/
          zip -r gt2ultra-linux-taggedbuild-${{ steps.vars.outputs.tag }}.zip gt2ultra-linux/
          ls -lhai *.zip
          ls -lhai gt2ultra-linux/

      - name: Upload Zip
        id: upload_zip
        uses: actions/github-script@v7
        env:
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
          ASSET_PATH: ${{github.workspace}}/gt2ultra-linux/gt2ultra-linux-taggedbuild-${{ steps.vars.outputs.tag }}.zip
          ASSET_NAME: gt2ultra-linux-taggedbuild-${{ steps.vars.outputs.tag }}.zip
          ASSET_CONTENT_TYPE: application/zip
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            const fs = require('fs');
            const { UPLOAD_URL, ASSET_PATH, ASSET_NAME, ASSET_CONTENT_TYPE } = process.env;
            const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
              url: UPLOAD_URL,
              headers: {
                'content-type': ASSET_CONTENT_TYPE,
                'content-length': fs.statSync(ASSET_PATH).size
              },
              name: ASSET_NAME,
              data: fs.readFileSync(ASSET_PATH)
            });

  # build_win:
  #     name: Build
  #     needs: [create_release]
  #     runs-on: windows-latest
  #     strategy:
  #       fail-fast: false
  #       matrix:
  #         arch:
  #         - { msystem: MINGW64, arch: x86_64, prefix: mingw64 }
  #           #- { msystem: MINGW32, arch: i686,   prefix: mingw32 }
  #     steps:
  #       - run: git config --global core.autocrlf input
  #         shell: bash

  #       - name: Checkout Source
  #         if: env.exiting1 != 'true'
  #         uses: actions/checkout@v4

  #       - name: Install SDL2 Dependencies if Applicable
  #         uses: msys2/setup-msys2@v2
  #         with:
  #           msystem: ${{ matrix.arch.msystem }}
  #           update: true
  #           install: >-
  #             autotools
  #             base-devel
  #             git
  #             mingw-w64-${{ matrix.arch.arch }}-SDL
  #             mingw-w64-${{ matrix.arch.arch }}-SDL_image
  #             mingw-w64-${{ matrix.arch.arch }}-SDL2
  #             mingw-w64-${{ matrix.arch.arch }}-SDL2_image
  #             mingw-w64-${{ matrix.arch.arch }}-curl
  #             mingw-w64-${{ matrix.arch.arch }}-docbook-xml
  #             mingw-w64-${{ matrix.arch.arch }}-docbook-xsl
  #             mingw-w64-${{ matrix.arch.arch }}-flac
  #             mingw-w64-${{ matrix.arch.arch }}-giflib
  #             mingw-w64-${{ matrix.arch.arch }}-glew
  #             mingw-w64-${{ matrix.arch.arch }}-icoutils
  #             mingw-w64-${{ matrix.arch.arch }}-lame
  #             mingw-w64-${{ matrix.arch.arch }}-libpcap
  #             mingw-w64-${{ matrix.arch.arch }}-libvorbis
  #             mingw-w64-${{ matrix.arch.arch }}-mpg123
  #             mingw-w64-${{ matrix.arch.arch }}-ntldd
  #             mingw-w64-${{ matrix.arch.arch }}-pkg-config
  #             mingw-w64-${{ matrix.arch.arch }}-portaudio
  #             mingw-w64-${{ matrix.arch.arch }}-toolchain
  #             mingw-w64-${{ matrix.arch.arch }}-xa65
  #             mingw-w64-${{ matrix.arch.arch }}-libusb
  #             p7zip
  #             subversion
  #             unzip
  #             xmlto
  #             zip

  #       - name: Build
  #         id: build
  #         shell: msys2 {0}
  #         run: |
  #           mkdir -p win32
  #           cd src
  #           cp makefile.win makefile
  #           cd bme
  #           cp makefile.win makefile
  #           make -j2 -s --no-print-directory
  #           cd ../
  #           make -j2 -s --no-print-directory

  #       - name: Zip files
  #         id: make_zip
  #         working-directory: ${{github.workspace}}
  #         shell: bash
  #         run: |
  #           mkdir gt2ultra-win
  #           cp -av win32/* gt2ultra-win32/
  #           zip -r gt2ultra-win-taggedbuild-${{ steps.vars.outputs.tag }}.zip gt2ultra-win32/

  #       - name: Upload Zip
  #         id: upload-zip
  #         uses: actions/github-script@v7
  #         env:
  #           UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
  #           ASSET_PATH: ${{github.workspace}}/gt2ultra-win32/gt2ultra-win-taggedbuild-${{ steps.vars.outputs.tag }}.zip
  #           ASSET_NAME: gt2ultra-win-taggedbuild-${{ steps.vars.outputs.tag }}.zip
  #           ASSET_CONTENT_TYPE: application/zip
  #         with:
  #           github-token: ${{secrets.GITHUB_TOKEN}}
  #           retries: 3
  #           script: |
  #             const fs = require('fs');
  #             const { UPLOAD_URL, ASSET_PATH, ASSET_NAME, ASSET_CONTENT_TYPE } = process.env;
  #             const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
  #               url: UPLOAD_URL,
  #               headers: {
  #                 'content-type': ASSET_CONTENT_TYPE,
  #                 'content-length': fs.statSync(ASSET_PATH).size
  #               },
  #               name: ASSET_NAME,
  #               data: fs.readFileSync(ASSET_PATH)
  #             });

  # build_mac:
  #   name: Build MacOs Package
  #   needs: [create_release]
  #   runs-on: macos-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #         ui: [ { name: 'SDL2',
  #                 deps: 'sdl sdl12-compat sdl2 sdl2_image' },
  #             ]
  #   steps:
  #     - name: Checkout Source
  #       uses: actions/checkout@v4

  #     - name: deps [macOS]
  #       if: runner.os == 'macOS'
  #       run: |
  #         export HOMEBREW_NO_INSTALL_CLEANUP=1
  #         brew update
  #         brew upgrade || true
  #         brew uninstall --ignore-dependencies --force pkg-config@0.29.2
  #         brew install \
  #           dos2unix \
  #           autoconf \
  #           automake \
  #           libtool \
  #           pkgconf \
  #           coreutils \
  #           gnu-sed \
  #           libgcrypt \
  #           xa \
  #           librsvg \
  #           adwaita-icon-theme \
  #           glew \
  #           libusb \
  #           libusb-compat \
  #           ${{ matrix.ui.deps }}
  #     - name: Build
  #       run: |
  #         mkdir -p macos
  #         cd src
  #         cp makefile.mac makefile
  #         cd bme
  #         cp makefile.mac makefile
  #         make -j2 -s --no-print-directory
  #         cd ../
  #         make -j2 -s --no-print-directory

  #     - name: Zip files
  #       id: make_zip
  #       working-directory: ${{github.workspace}}
  #       shell: bash
  #       run: |
  #         mkdir gt2ultra-macos
  #         cp -av macos/* gt2ultra-macos/
  #         tar cvzf gt2ultra-macos-taggedbuild-${{ steps.vars.outputs.tag }}.tgz -C gt2ultra-macos .
  #         pwd
  #         ls -l

  #     - name: Upload zip
  #       id: upload_macoszip
  #       uses: actions/github-script@v7
  #       env:
  #         UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
  #         ASSET_PATH: ${{github.workspace}}/gt2ultra-macos-taggedbuild-${{ steps.vars.outputs.tag }}.tgz
  #         ASSET_NAME: gt2ultra-macos-taggedbuild-${{ steps.vars.outputs.tag }}.tgz
  #         ASSET_CONTENT_TYPE: application/vnd.debian.binary-package
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         retries: 3
  #         script: |
  #           const fs = require('fs');
  #           const { UPLOAD_URL, ASSET_PATH, ASSET_NAME, ASSET_CONTENT_TYPE } = process.env;
  #           const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
  #             url: UPLOAD_URL,
  #             headers: {
  #               'content-type': ASSET_CONTENT_TYPE,
  #               'content-length': fs.statSync(ASSET_PATH).size
  #             },
  #             name: ASSET_NAME,
  #             data: fs.readFileSync(ASSET_PATH)
  #           });

  publish_release:
    name: Publish Release
    # needs: [create_release, build_mac, build_win, build_lin]
    needs: [create_release, build_lin]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            await github.rest.repos.updateRelease(
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create_release.outputs.release_id }},
                draft: false
              });
